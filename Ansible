What is Ansible:
  Ansible is an open-source automation tool used for configuration management, application deployment, orchestration, and task automation. It is designed to simplify IT tasks by automating repetitive, complex operations. 
  Ansible is agentless, meaning it doesn’t require any special software to be installed on the managed systems—it communicates using SSH (for Linux) or WinRM (for Windows).
What is PlayBook ?
  A Playbook in Ansible is a file written in YAML that contains a series of instructions or tasks for Ansible to execute on managed nodes (servers).
What is Ansible Adhoc ?
  if we want to execute a couple of commands in ansible nodes, instead of going through ansible playbook, we can use ansible adhoc commands.


1. install Ansible in master -- > sudo apt install ansible
2. to check -- > ansible --version
3. generate key in master node -- > ssh-keygen
4. copy public key in master that is in particular path
5. go to child node again do "ssh-keygen" in that, go to (vi authoriged keys) paste the public key in that.
6. then we access the child node from master node.
7. you can test it by ssh <private address of child node> --> you can access it.
8. logout

we need to save child node private ip address in inventory file which is in master node

execute this command in aster node
    ansible -i inventory all -m "shell" -a "touch devops"
    --> -m indicates the module, -a indicates the command we exxecute.
    -->  this coomand creates the devops file in child nodes i.e., ip address in invetory file
    -->  shell indicates the, we executes the shell commands

we can executes various commands visit ansible documentations  --> https://docs.ansible.com/ansible/2.9/modules/copy_module.html#copy-module




playbook to install nginx in child nodes

playbook file extends with ".yml"

---
- name: Install and Start nginx
  hosts: all
  become: true

  tasks:
   - name: Install nginx
     apt:
       name: nginx
       state: present
   - name: start nginx
     service:
       name: nginx
       state: started

--> to execute this playbook use command  -->  ansible-playbook -i inventory <playbook name>



we can group the servers in ansible
ex: we have 10 systems in that i need to install git on 5 systems and install nginx in 5 systems to achieve this 
    we use grouping in inventory file
Syntax for grouping:
  [<grp_name>]  -- >  [software]
  1. ip address
  2. ip address
  [<grp_name>]  -->   [hardware]
  1. ip address
  2. ip address

we have to write two playbooks to install git and nginx in various systems.
command to run the playbook

ansible-playbook -i inventory software playbook1.yml


YAML
What is YAML ? 
YAML (YAML Ain't Markup Language) is a human-readable data serialization format, commonly used for configuration files and data exchange between languages with different data structures. 
It is simple and easy to understand due to its straightforward syntax, which relies on indentation, making it readable like a structured document.

# Understanding YAML

YAML (YAML Ain't Markup Language) is a human-readable data serialization format that is commonly used for configuration files and data exchange between languages with different data structures.

## YAML Syntax

### Strings, Numbers and Booleans:

```
string: Hello, World!
number: 42
boolean: true
```

### List 

```
fruits:
  - Apple
  - Orange
  - Banana
```

### Dictionary 

```
person:
  name: John Doe
  age: 30
  city: New York
```

### List of dictionaries 

YAML allows nesting of lists and dictionaries to represent more complex data.

```
family:
  parents:
    - name: Jane
      age: 50
    - name: John
      age: 52
  children:
    - name: Jimmy
      age: 22
    - name: Jenny
      age: 20
```

# Ansible Concepts: Playbook, Play, Modules, Tasks, and Collections

## Playbook
A **Playbook** is a YAML file that defines a series of actions to be executed on managed nodes. It contains one or more "plays" that map groups of hosts to roles.

### Example
```
---
- name: Update web servers
  hosts: webservers
  remote_user: root

  tasks:
  - name: Ensure apache is at the latest version
    ansible.builtin.yum:
      name: httpd
      state: latest

  - name: Write the apache config file
    ansible.builtin.template:
      src: /srv/httpd.j2
      dest: /etc/httpd.conf

- name: Update db servers
  hosts: databases
  remote_user: root

  tasks:
  - name: Ensure postgresql is at the latest version
    ansible.builtin.yum:
      name: postgresql
      state: latest

  - name: Ensure that postgresql is started
    ansible.builtin.service:
      name: postgresql
      state: started
```

## Play

A Play is a single, complete execution unit within a playbook. It specifies which hosts to target and what tasks to execute on those hosts. Plays are used to group related tasks and execute them in a specific order.

```
- name: Install and configure Nginx
  hosts: webservers
  tasks:
    - name: Install Nginx
      apt:
        name: nginx
        state: present
```

## Modules

Modules are the building blocks of Ansible tasks. They are small programs that perform a specific action on a managed node, such as installing a package, copying a file, or managing services.
Example

The apt module used in a task to install a package:

```
- name: Install Nginx
  apt:
    name: nginx
    state: present
```

## Tasks

Tasks are individual actions within a play that use modules to perform operations on managed nodes. Each task is executed in order and can include conditionals, loops, and handlers.
      
```
- name: Install Nginx
  apt:
    name: nginx
    state: present

- name: Start Nginx service
  service:
    name: nginx
    state: started
```

## Collections

Collections are a distribution format for Ansible content. They bundle together multiple roles, modules, plugins, and other Ansible artifacts. Collections make it easier to share and reuse Ansible content.
Example

A collection structure might look like this:

```
my_collection/
├── roles/
│   └── my_role/
│       └── tasks/
│           └── main.yml
├── plugins/
│   └── modules/
│       └── my_module.py
└── README.md
```

### Using a Collection

```
- name: Use a custom module from a collection
  community.general.my_module:
    option: value
```

Ansible Roles

An Ansible role is a reusable, self-contained unit of automation that is used to organize and manage tasks, variables, files, templates, and handlers in a structured way.

Roles help to encapsulate and modularize the logic and configuration needed to manage a particular system or application component.

This modular approach promotes reusability, maintainability, and consistency across different playbooks and environments.

ansible role is created by following command...
syntax : ansible-galaxy role init <role_name>

Key Components of an Ansible Role
Tasks
The main list of actions that the role performs.

Handlers
Tasks that are triggered by changes in other tasks, typically used for actions like restarting services.

Files
Static files that need to be transferred to managed hosts.

Templates
Jinja2 templates that can be rendered and transferred to managed hosts.

Vars
Variables that are used within the role.

Defaults
Default variables for the role, which can be overridden.

Meta
Metadata about the role, including dependencies on other roles.

Library
Custom modules or plugins used within the role.

Module_defaults
Default module parameters for the role.

Lookup_plugins
Custom lookup plugins for the role.

Directory Structure of an Ansible Role
An Ansible role follows a specific directory structure:

<role_name>/
  ├── defaults/
  │   └── main.yml
  ├── files/
  ├── handlers/
  │   └── main.yml
  ├── meta/
  │   └── main.yml
  ├── tasks/
  │   └── main.yml
  ├── templates/
  ├── vars/
      └── main.yml
Why Use Ansible Roles?
Modularity
Roles allow you to break down complex playbooks into smaller, reusable components. Each role handles a specific part of the configuration or setup.

Reusability
Once created, roles can be reused across different playbooks and projects. This saves time and effort in writing redundant code.

Maintainability
By organizing related tasks into roles, it becomes easier to manage and maintain the code. Changes can be made in one place and applied consistently wherever the role is used.

Readability
Roles make playbooks cleaner and easier to read by abstracting away the details into logically named roles.

Collaboration
Roles facilitate collaboration among team members by allowing them to work on different parts of the infrastructure independently.

Consistency
Using roles ensures that the same setup and configuration procedures are applied uniformly across multiple environments, reducing the risk of configuration drift.
